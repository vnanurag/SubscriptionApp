{"version":3,"sources":["Components/Subscription.js","Components/SubscriptionOverview.js","Server/data.js","reducers/subscriptionReducer.js","redux/actions.js","Components/App.js","serviceWorker.js","reducers/rootReducer.js","redux/store.js","index.js"],"names":["Subscription","props","handlePlanChange","e","plan","Object","keys","plans","find","p","target","value","setState","inputChanged","planName","newData","data","seats","state","handleSeatsChange","isNaN","parseInt","update","store","cost","prevData","bind","this","handlePrevData","Form","id","className","Group","Control","as","defaultValue","name","onChange","map","val","key","Label","Button","variant","disabled","onClick","React","Component","SubscriptionOverview","back","Row","Col","PLAN_COSTS","basic","good","better","best","PLAN_NAMES","storedSubscription","updateData","settings","Promise","resolve","reject","intialStore","overview","errorMessage","getData","dispatch","then","response","type","payload","catch","error","subscriptionReducer","action","App","onPlanChange","onSeatsChange","onUpdate","onBack","onHandlePrevData","loading","costs","connect","Actions","Api","PlanChangeSuccess","PlanChangeFailure","SeatsChangeSuccess","SeatsChangeFailure","UpdateSuccess","UpdateFailure","PrevData","Boolean","window","location","hostname","match","combineReducers","configureStore","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAiIeA,G,kBA3HX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAsEVC,iBAAmB,SAACC,GAChB,IAAIC,EAAOC,OAAOC,KAAK,EAAKL,MAAMM,OAAOC,MAAK,SAACC,GAC3C,GAAGN,EAAEO,OAAOC,QAAU,EAAKV,MAAMM,MAAME,GACnC,OAAOA,KAGf,EAAKG,SAAS,CACVC,cAAc,EACdC,SAAUV,IAGd,IAAIW,EAAU,CACVC,KAAK,CACDZ,KAAMA,EACNa,MAAO,EAAKC,MAAMD,QAG1B,EAAKhB,MAAMC,iBAAiBa,IAxFd,EA2FlBI,kBAAoB,SAAChB,GACjB,GAAGiB,MAAMC,SAASlB,EAAEO,OAAOC,SAAWU,SAASlB,EAAEO,OAAOC,OAAO,EAC3D,EAAKC,SAAS,CACVC,cAAc,QAGlB,CACA,EAAKD,SAAS,CACVC,cAAc,EACdI,MAAOd,EAAEO,OAAOC,QAEpB,IAAII,EAAU,CACVC,KAAK,CACDZ,KAAM,EAAKc,MAAMJ,SACjBG,MAAOd,EAAEO,OAAOC,QAGxB,EAAKV,MAAMkB,kBAAkBJ,KA5GnB,EAgHlBO,OAAS,WACL,IAAIP,EAAU,CACVC,KAAK,CACDZ,KAAM,EAAKc,MAAMJ,SACjBG,MAAO,EAAKC,MAAMD,QAG1B,EAAKhB,MAAMqB,OAAOP,IArHlB,EAAKG,MAAQ,CACTL,cAAc,EACdC,SAAU,EAAKb,MAAMsB,MAAMnB,KAC3Ba,MAAO,EAAKhB,MAAMsB,MAAMN,MACxBO,KAAM,EAAKvB,MAAMsB,MAAMC,KACvBC,SAAS,IAGb,EAAKvB,iBAAmB,EAAKA,iBAAiBwB,KAAtB,gBACxB,EAAKP,kBAAoB,EAAKA,kBAAkBO,KAAvB,gBAXX,E,iFAedC,KAAKf,SAAS,CACVa,SAAUE,KAAK1B,MAAMsB,U,6CAKzB,IAAIE,EAAWE,KAAKT,MAAMO,SAC1BE,KAAK1B,MAAM2B,eAAeH,K,+BAGrB,IAAD,OACJ,OACI,kBAACI,EAAA,EAAD,CAAMC,GAAG,gBACL,4CACA,yBAAKC,UAAU,WACX,kBAACF,EAAA,EAAKG,MAAN,CAAYD,UAAU,aAClB,kBAACF,EAAA,EAAKI,QAAN,CACIH,GAAG,gBACHI,GAAG,SACHC,aAAcR,KAAK1B,MAAMsB,MAAMa,KAC/BC,SAAUV,KAAKzB,kBAEdG,OAAOC,KAAKqB,KAAK1B,MAAMM,OAAO+B,KAAI,SAACC,EAAKC,GACrC,OAAO,4BAAQA,IAAKA,GAAM,EAAKvC,MAAMM,MAAMgC,QAGnD,kBAACV,EAAA,EAAKY,MAAN,cAGJ,kBAACZ,EAAA,EAAKG,MAAN,CAAYD,UAAU,cAClB,kBAACF,EAAA,EAAKI,QAAN,CACIH,GAAG,aACHI,GAAG,QACHC,aAAcR,KAAK1B,MAAMsB,MAAMN,MAC/BoB,SAAUV,KAAKR,oBACnB,kBAACU,EAAA,EAAKY,MAAN,eAGJ,kBAACZ,EAAA,EAAKG,MAAN,CAAYD,UAAU,SAClB,yBAAKD,GAAG,cACAnB,MAAOgB,KAAK1B,MAAMsB,MAAMC,MADhC,IACwCG,KAAK1B,MAAMsB,MAAMC,MACzD,kBAACK,EAAA,EAAKY,MAAN,CAAYV,UAAU,SAAtB,WAIR,kBAACW,EAAA,EAAD,CACIZ,GAAG,gBACHa,QAAShB,KAAKT,MAAML,aAAe,UAAY,YAC/C+B,UAAWjB,KAAKT,MAAML,aACtBgC,QAASlB,KAAKL,QAJlB,4B,GA7DWwB,IAAMC,Y,gBCgDlBC,E,2MALXC,KAAO,WACH,EAAKhD,MAAMgD,Q,wEAzCX,OACI,kBAACpB,EAAA,EAAD,CAAMC,GAAG,YACL,kBAACoB,EAAA,EAAD,CAAKnB,UAAU,OACX,kBAACoB,EAAA,EAAD,CAAKpB,UAAU,yBACX,qDACA,kBAACmB,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,QACA,yBAAKA,UAAU,aAAaJ,KAAK1B,MAAMsB,MAAME,SAASW,OAE1D,kBAACc,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,SACA,yBAAKA,UAAU,aAAaJ,KAAK1B,MAAMsB,MAAME,SAASR,QAE1D,kBAACiC,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,SACA,yBAAKA,UAAU,aAAf,IAA6BJ,KAAK1B,MAAMsB,MAAME,SAASD,QAI/D,kBAAC2B,EAAA,EAAD,CAAKpB,UAAU,yBACX,oDACA,kBAACmB,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,QACA,yBAAKA,UAAU,aAAaJ,KAAK1B,MAAMsB,MAAMa,OAEjD,kBAACc,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,SACA,yBAAKA,UAAU,aAAaJ,KAAK1B,MAAMsB,MAAMN,QAEjD,kBAACiC,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAKY,MAAN,CAAYV,UAAU,aAAtB,SACA,yBAAKA,UAAU,aAAf,IAA6BJ,KAAK1B,MAAMsB,MAAMC,SAI1D,kBAACkB,EAAA,EAAD,CAAQZ,GAAG,cAAca,QAAQ,UAAUE,QAASlB,KAAKsB,MAAzD,a,GArCmBH,IAAMC,WCJ5BK,EAAa,CACtBC,MAAQ,EACRC,KAAQ,GACRC,OAAQ,IACRC,KAAQ,KAGGC,EAAa,CACxBJ,MAAQ,QACRC,KAAQ,OACRC,OAAQ,SACRC,KAAQ,QAINE,EAAqB,CACvBtD,KAAM,OACNgC,KAAM,OACNnB,MAAO,EACPO,KAAO,IASImC,EAAa,SAACC,GACzB,IAAI7C,EAAU,CACVX,KAAOwD,EAAS5C,KAAKZ,KACrBgC,KAAOqB,EAAWG,EAAS5C,KAAKZ,MAChCa,MAAO2C,EAAS5C,KAAKC,MACrBO,KAAOoC,EAAS5C,KAAKC,MAAQmC,EAAWQ,EAAS5C,KAAKZ,OAK1D,OAHmBsD,EACnBA,EAAqB3C,EAEd,IAAI8C,SAAQ,SAACC,EAASC,GAC3BD,EAAQ/C,O,eCtCViD,EAAc,CACd5D,KAAM,GACNgC,KAAM,GACNnB,MAAO,EACPO,KAAO,EACPyC,UAAU,EACVxC,SAAS,GACTyC,aAAc,IAgGLC,EAAU,kBAAM,SAACC,GAC1B,ODlFS,IAAIP,SAAQ,SAACC,EAASC,GAC3BD,EAAQJ,MCkFCW,MAAK,SAACC,GAAD,OAAcF,ECpGzB,CACHG,KAAM,mBACNC,QDkGoDF,OAC3CG,OAAM,SAACC,GAAD,OAAWN,EC9FvB,CACHG,KAAM,mBACNC,QD4FkDE,SA6B3CC,EA7Ha,WAAkC,IAAjCzD,EAAgC,uDAAxB8C,EAAaY,EAAW,uCACzD,OAAOA,EAAOL,MACV,IAAK,gBACD,MAAO,CACHrD,SAER,IAAK,mBACD,IAAMsD,EAAUI,EAAOJ,QAEvB,OADAtD,EAAQsD,EAGZ,IAAK,mBACD,IAAMA,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEI+C,UAAU,EACVC,aAAcM,IAGtB,IAAK,sBACD,IAAMA,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEId,KAAMoE,EAAQpE,KACdgC,KAAMoC,EAAQpC,KACdnB,MAAOuD,EAAQvD,MACfO,KAAMgD,EAAQhD,OAGtB,IAAK,sBACD,IAAMgD,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEIgD,aAAcM,IAGtB,IAAK,uBACD,IAAMA,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEId,KAAMoE,EAAQpE,KACdgC,KAAMoC,EAAQpC,KACdnB,MAAOuD,EAAQvD,MACfO,KAAMgD,EAAQhD,OAGtB,IAAK,uBACD,IAAMgD,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEIgD,aAAcM,IAGtB,IAAK,8BACD,IAAMA,EAAUI,EAAOJ,QACvB,sBACOtD,EADP,CAEId,KAAMoE,EAAQpE,KACdgC,KAAMoC,EAAQpC,KACdnB,MAAOuD,EAAQvD,MACfO,KAAMgD,EAAQhD,KACdyC,UAAU,EACVxC,SAAS,KAGjB,IAAK,8BACD,IAAM+C,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEI+C,UAAU,EACVC,aAAcM,IAGtB,IAAK,0BACD,OAAO,eACAtD,EADP,CAEI+C,UAAU,IAGlB,IAAK,gCACD,IAAMO,EAAUI,EAAOJ,QACvB,OAAO,eACAtD,EADP,CAEIO,SAAU+C,IAIlB,QACI,OAAOtD,IE9Fb2D,E,YACJ,WAAY5E,GAAO,IAAD,8BAChB,4CAAMA,KAwBR6E,aAAe,SAAC9D,GACd,EAAKf,MAAM6E,aAAa9D,IA1BR,EA6BlB+D,cAAgB,SAAC/D,GACf,EAAKf,MAAM8E,cAAc/D,IA9BT,EAiClBgE,SAAW,SAAChE,GACV,EAAKf,MAAM+E,SAAShE,IAlCJ,EAqClBiE,OAAS,WACP,EAAKhF,MAAMgF,UAtCK,EAyClBC,iBAAmB,SAAClE,GAClB,EAAKf,MAAMiF,iBAAiBlE,IAvC5B,EAAKE,MAAM,CACTiE,SAAS,EACTT,MAAO,GACPjD,SAAS,IAGX,EAAKqD,aAAe,EAAKA,aAAapD,KAAlB,gBACpB,EAAKqD,cAAgB,EAAKA,cAAcrD,KAAnB,gBACrB,EAAKsD,SAAW,EAAKA,SAAStD,KAAd,gBAChB,EAAKuD,OAAS,EAAKA,OAAOvD,KAAZ,gBACd,EAAKwD,iBAAmB,EAAKA,iBAAiBxD,KAAtB,gBAbR,E,iFAgBE,IAAD,OACjBC,KAAK1B,MAAMkE,UACRE,MAAK,WACJ,EAAKzD,SAAS,CACZuE,SAAS,S,+BA0Bf,OACE,6BAEIxD,KAAKT,MAAMiE,QACP,yBAAKpD,UAAU,WAAf,cAEF,6BAEIJ,KAAK1B,MAAMsB,MAAM0C,SACb,kBAAC,EAAD,CACE1C,MAAOI,KAAK1B,MAAMsB,MAClB0B,KAAMtB,KAAKsD,SACb,kBAAC,EAAD,CACE1D,MAAOI,KAAK1B,MAAMsB,MAClBhB,MAAOkD,EACP2B,MAAOhC,EACPlD,iBAAkByB,KAAKmD,aACvB3D,kBAAmBQ,KAAKoD,cACxBnD,eAAgBD,KAAKuD,iBACrB5D,OAAQK,KAAKqD,iB,GAlEjBlC,IAAMC,WA6FTsC,eAhBS,SAACnE,GAAD,MAAW,CACjCK,MAAOL,EAAMyD,wBAGY,SAACP,GAC1B,MAAO,CACLD,QAAS,kBAAMC,EAASkB,MACxBR,aAAc,SAAC9D,GAAD,OAAUoD,EFqBF,SAACpD,GAAD,OAAU,SAACoD,GACjC,OAAOmB,EAAevE,GACTqD,MAAK,SAACC,GAAD,OAAcF,EC7FH,SAACpD,GAC9B,MAAO,CACHuD,KAAM,sBACNC,QAASxD,GD0F4BwE,CAAkBlB,OAC9CG,OAAM,SAACC,GAAD,OAAWN,ECvFD,SAACpD,GAC9B,MAAO,CACHuD,KAAM,sBACNC,QAASxD,GDoF0ByE,CAAkBf,QExBxBY,CAAmBtE,KACpD+D,cAAe,SAAC/D,GAAD,OAAUoD,EF0BF,SAACpD,GAAD,OAAU,SAACoD,GAClC,OAAOmB,EAAevE,GACTqD,MAAK,SAACC,GAAD,OAAcF,ECrFF,SAACpD,GAC/B,MAAO,CACHuD,KAAM,uBACNC,QAASxD,GDkF4B0E,CAAmBpB,OAC/CG,OAAM,SAACC,GAAD,OAAWN,EC/EA,SAACpD,GAC/B,MAAO,CACHuD,KAAM,uBACNC,QAASxD,GD4E0B2E,CAAmBjB,QE7BxBY,CAAoBtE,KACtDgE,SAAU,SAAChE,GAAD,OAAUoD,EF+BF,SAACpD,GAAD,OAAU,SAACoD,GAC7B,OAAOmB,EAAevE,GACTqD,MAAK,SAACC,GAAD,OAAcF,EC7EP,SAACpD,GAC1B,MAAO,CACHuD,KAAM,8BACNC,QAASxD,GD0E4B4E,CAActB,OAC1CG,OAAM,SAACC,GAAD,OAAWN,ECvEL,SAACpD,GAC1B,MAAO,CACHuD,KAAM,8BACNC,QAASxD,GDoE0B6E,CAAcnB,QElCxBY,CAAetE,KAC5CiE,OAAQ,kBAAMb,GFoCQ,SAACA,GACvBA,ECrDO,CACHG,KAAM,0BACNC,QAAS,SCebU,iBAAkB,SAAClE,GAAD,OAAUoD,EFuCR,SAACpD,GAAD,OAAU,SAACoD,GAC/BA,ECnDoB,SAACpD,GACrB,MAAO,CACHuD,KAAM,gCACNC,QAASxD,GDgDJ8E,CAAS9E,KExCmBsE,CAAiBtE,QAK3CqE,CAA6CR,GCxFxCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCfSC,cAAgB,CAC3BzB,wBCaW0B,EANQ,WACnB,OAAOC,YACHC,EACAC,YAAgBC,OCJxBC,IAASC,OACL,kBAAC,IAAD,CAAUpF,MAAO8E,KACb,kBAAC,EAAD,OAEJO,SAASC,eAAe,SHqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.bd72a447.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport '../Server/mockjax'\r\n\r\nclass Subscription extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inputChanged: false,\r\n            planName: this.props.store.plan,\r\n            seats: this.props.store.seats,\r\n            cost: this.props.store.cost,\r\n            prevData:{}\r\n        }\r\n\r\n        this.handlePlanChange = this.handlePlanChange.bind(this);\r\n        this.handleSeatsChange = this.handleSeatsChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            prevData: this.props.store\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        let prevData = this.state.prevData;\r\n        this.props.handlePrevData(prevData);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Form id=\"subscription\">\r\n                <h2>Subscription</h2>\r\n                <div className=\"product\">\r\n                    <Form.Group className=\"edit-plan\">\r\n                        <Form.Control \r\n                            id=\"plan-dropdown\" \r\n                            as=\"select\" \r\n                            defaultValue={this.props.store.name}\r\n                            onChange={this.handlePlanChange} >\r\n\r\n                            {Object.keys(this.props.plans).map((val, key)=>{\r\n                                return <option key={key}>{this.props.plans[val]}</option>\r\n                            })}\r\n                        </Form.Control>\r\n                        <Form.Label>Plan</Form.Label>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"edit-seats\">\r\n                        <Form.Control \r\n                            id=\"seatsInput\" \r\n                            as=\"input\" \r\n                            defaultValue={this.props.store.seats}\r\n                            onChange={this.handleSeatsChange}></Form.Control>\r\n                        <Form.Label>Seats</Form.Label>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"price\">\r\n                        <div id=\"price-value\" \r\n                                value={this.props.store.cost}>${this.props.store.cost}</div>\r\n                        <Form.Label className=\"label\">Price</Form.Label>\r\n                    </Form.Group>\r\n                </div>\r\n\r\n                <Button \r\n                    id=\"submit-button\" \r\n                    variant={this.state.inputChanged ? \"primary\" : \"secondary\"}\r\n                    disabled={!this.state.inputChanged}\r\n                    onClick={this.update}>\r\n                        Update Subscription\r\n                </Button> \r\n            </Form>\r\n        );\r\n    }\r\n\r\n    handlePlanChange = (e) => {\r\n        let plan = Object.keys(this.props.plans).find((p) => {\r\n            if(e.target.value === this.props.plans[p]){\r\n                return p;\r\n            }\r\n        })\r\n        this.setState({\r\n            inputChanged: true,\r\n            planName: plan\r\n        });\r\n\r\n        let newData = {\r\n            data:{\r\n                plan: plan,\r\n                seats: this.state.seats\r\n            }\r\n        }\r\n        this.props.handlePlanChange(newData);\r\n    }\r\n\r\n    handleSeatsChange = (e) => {\r\n        if(isNaN(parseInt(e.target.value)) || parseInt(e.target.value)<0){\r\n            this.setState({\r\n                inputChanged: false\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputChanged: true,\r\n                seats: e.target.value\r\n            });\r\n            let newData = {\r\n                data:{\r\n                    plan: this.state.planName,\r\n                    seats: e.target.value\r\n                }\r\n            }\r\n            this.props.handleSeatsChange(newData);\r\n        }\r\n    }\r\n\r\n    update = () => {\r\n        let newData = {\r\n            data:{\r\n                plan: this.state.planName,\r\n                seats: this.state.seats,\r\n            }\r\n        };\r\n        this.props.update(newData);\r\n    }\r\n}\r\n\r\nexport default Subscription;","import React from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass SubscriptionOverview extends React.Component{\r\n    render(){\r\n        return(\r\n            <Form id=\"overview\">\r\n                <Row className=\"row\">\r\n                    <Col className=\"subscription-overview\">\r\n                        <h4>Previous Subscription</h4>\r\n                        <Row>\r\n                            <Form.Label className=\"old-label\">Plan</Form.Label>\r\n                            <div className=\"old-value\">{this.props.store.prevData.name}</div>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Label className=\"old-label\">Seats</Form.Label>\r\n                            <div className=\"old-value\">{this.props.store.prevData.seats}</div>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Label className=\"old-label\">Price</Form.Label>\r\n                            <div className=\"old-value\">${this.props.store.prevData.cost}</div>\r\n                        </Row>\r\n                    </Col>\r\n                    \r\n                    <Col className=\"subscription-overview\">\r\n                        <h4>Updated Subscription</h4>\r\n                        <Row>\r\n                            <Form.Label className=\"new-label\">Plan</Form.Label>\r\n                            <div className=\"new-value\">{this.props.store.name}</div>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Label className=\"new-label\">Seats</Form.Label>\r\n                            <div className=\"new-value\">{this.props.store.seats}</div>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Label className=\"new-label\">Price</Form.Label>\r\n                            <div className=\"new-value\">${this.props.store.cost}</div>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Button id=\"back-button\" variant=\"primary\" onClick={this.back}>Back</Button> \r\n            </Form>\r\n        )\r\n    }\r\n\r\n    back = () => {\r\n        this.props.back();\r\n    }\r\n}\r\n\r\nexport default SubscriptionOverview;\r\n","// Mock back end data\r\n\r\nexport const PLAN_COSTS = {\r\n    basic:  1,\r\n    good:   10,\r\n    better: 100,\r\n    best:   1000\r\n  }\r\n  \r\n  export const PLAN_NAMES = {\r\n    basic:  'Basic',\r\n    good:   'Good',\r\n    better: 'Better',\r\n    best:   'Best'\r\n  }\r\n  \r\n  let prevSubscription;\r\n  let storedSubscription = {\r\n    plan: 'good',\r\n    name: 'Good',\r\n    seats: 5,\r\n    cost:  50\r\n  };\r\n\r\n  export const getData = () => {\r\n      return new Promise((resolve, reject) => {\r\n        resolve(storedSubscription)\r\n      })\r\n  }\r\n\r\n  export const updateData = (settings) => {\r\n    let newData = {\r\n        plan:  settings.data.plan,\r\n        name:  PLAN_NAMES[settings.data.plan],\r\n        seats: settings.data.seats,\r\n        cost:  settings.data.seats * PLAN_COSTS[settings.data.plan]      \r\n        }\r\n    prevSubscription = storedSubscription;\r\n    storedSubscription = newData;;\r\n\r\n    return new Promise((resolve, reject) =>{\r\n      resolve(newData);\r\n    })\r\n  }\r\n\r\n  export const submitData = (settings) => {\r\n      let newData = {\r\n        plan:  settings.data.plan,\r\n        name:  PLAN_NAMES[settings.data.plan],\r\n        seats: settings.data.seats,\r\n        cost:  settings.data.seats * PLAN_COSTS[settings.data.plan]\r\n      }\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        resolve(newData);\r\n    })\r\n  }","import * as Api from '../Server/data';\r\nimport { GetDataSuccess, GetDataFailure, PlanChangeSuccess, PlanChangeFailure, SeatsChangeSuccess, SeatsChangeFailure, SubmitSucess, SubmitFailure, Back, PrevData, UpdateSuccess, UpdateFailure } from '../redux/actions';\r\n\r\nlet intialStore = {\r\n    plan: '',\r\n    name: '',\r\n    seats: 0,\r\n    cost:  0,\r\n    overview: false,\r\n    prevData:{},\r\n    errorMessage: ''\r\n  };\r\n\r\nconst subscriptionReducer = (state = intialStore, action) => {\r\n    switch(action.type){\r\n        case \"INITIAL_STATE\":\r\n            return {\r\n                state\r\n            }\r\n        case 'GET_DATA_SUCCESS':{\r\n            const payload = action.payload;\r\n            state = payload;\r\n            return state;\r\n        }\r\n        case 'GET_DATA_FAILURE':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                overview: false,\r\n                errorMessage: payload\r\n            }\r\n        }\r\n        case 'PLAN_CHANGE_SUCCESS':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                plan: payload.plan,\r\n                name: payload.name,\r\n                seats: payload.seats,\r\n                cost: payload.cost\r\n            }\r\n        }\r\n        case 'PLAN_CHANGE_FAILURE':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                errorMessage: payload\r\n            };\r\n        }\r\n        case 'SEATS_CHANGE_SUCCESS':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                plan: payload.plan,\r\n                name: payload.name,\r\n                seats: payload.seats,\r\n                cost: payload.cost\r\n            }\r\n        }\r\n        case 'SEATS_CHANGE_FAILURE':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                errorMessage: payload\r\n            };\r\n        }\r\n        case 'UPDATE_SUBSCRIPTION_SUCCESS':{\r\n            const payload = action.payload;\r\n            return{\r\n                ...state,\r\n                plan: payload.plan,\r\n                name: payload.name,\r\n                seats: payload.seats,\r\n                cost: payload.cost,\r\n                overview: true,\r\n                prevData:{}\r\n            }\r\n        }\r\n        case 'UPDATE_SUBSCRIPTION_FAILURE':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                overview: false,\r\n                errorMessage: payload\r\n            }\r\n        }\r\n        case 'NAVIGATING_BACK_SUCCESS':{\r\n            return {\r\n                ...state,\r\n                overview: false\r\n            }\r\n        }\r\n        case 'PREVIOUS_SUBSCRIPTION_SUCCESS':{\r\n            const payload = action.payload;\r\n            return {\r\n                ...state,\r\n                prevData: payload\r\n\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }    \r\n    }\r\n}\r\n \r\nexport const getData = () => (dispatch) =>{\r\n    return Api.getData()\r\n                .then((response) => dispatch(GetDataSuccess(response)))\r\n                .catch((error) => dispatch(GetDataFailure(error)))\r\n}\r\n\r\nexport const planChange = (data) => (dispatch) =>{\r\n    return Api.updateData(data)\r\n                .then((response) => dispatch(PlanChangeSuccess(response)))\r\n                .catch((error) => dispatch(PlanChangeFailure(error)))\r\n}\r\n\r\nexport const seatsChange = (data) => (dispatch) =>{\r\n    return Api.updateData(data)\r\n                .then((response) => dispatch(SeatsChangeSuccess(response)))\r\n                .catch((error) => dispatch(SeatsChangeFailure(error)))\r\n}\r\n\r\nexport const update = (data) => (dispatch) =>{\r\n    return Api.updateData(data)\r\n                .then((response) => dispatch(UpdateSuccess(response)))\r\n                .catch((error) => dispatch(UpdateFailure(error)))\r\n}\r\n\r\nexport const back = () => (dispatch) => {\r\n    dispatch(Back());\r\n}\r\n\r\nexport const prevData = (data) => (dispatch) => {\r\n    dispatch(PrevData(data));\r\n}\r\n\r\nexport default subscriptionReducer;","export const InitialState = (data) => {\r\n    return {\r\n        type: 'INITIAL_STATE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const GetDataSuccess = (data) =>{\r\n    return {\r\n        type: 'GET_DATA_SUCCESS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const GetDataFailure = (data) =>{\r\n    return {\r\n        type: 'GET_DATA_FAILURE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const PlanChangeSuccess = (data) =>{\r\n    return {\r\n        type: 'PLAN_CHANGE_SUCCESS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const PlanChangeFailure = (data) =>{\r\n    return {\r\n        type: 'PLAN_CHANGE_FAILURE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const SeatsChangeSuccess = (data) =>{\r\n    return {\r\n        type: 'SEATS_CHANGE_SUCCESS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const SeatsChangeFailure = (data) =>{\r\n    return {\r\n        type: 'SEATS_CHANGE_FAILURE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const UpdateSuccess = (data) =>{\r\n    return {\r\n        type: 'UPDATE_SUBSCRIPTION_SUCCESS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const UpdateFailure = (data) =>{\r\n    return {\r\n        type: 'UPDATE_SUBSCRIPTION_FAILURE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const SubmitSucess = (data) =>{\r\n    return {\r\n        type: 'SUBMIT_SUBSCRIPTION_SUCCESS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const SubmitFailure = (data) =>{\r\n    return {\r\n        type: 'SUBMIT_SUBSCRIPTION_FAILURE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const Back = () => {\r\n    return {\r\n        type: 'NAVIGATING_BACK_SUCCESS',\r\n        payload: {}\r\n    }\r\n}\r\n\r\nexport const PrevData = (data) => {\r\n    return {\r\n        type: 'PREVIOUS_SUBSCRIPTION_SUCCESS',\r\n        payload: data\r\n    }\r\n}","import React from 'react';\nimport Subscription from './Subscription'\nimport SubscriptionOverview from './SubscriptionOverview'\nimport {PLAN_COSTS, PLAN_NAMES} from '../Server/data'\nimport {connect} from 'react-redux'\nimport * as Actions from '../reducers/subscriptionReducer'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      loading: true,\n      error: '',\n      prevData:{}\n    }\n\n    this.onPlanChange = this.onPlanChange.bind(this);\n    this.onSeatsChange = this.onSeatsChange.bind(this);\n    this.onUpdate = this.onUpdate.bind(this);\n    this.onBack = this.onBack.bind(this);\n    this.onHandlePrevData = this.onHandlePrevData.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.getData()\n      .then(() => {\n        this.setState({\n          loading: false\n        })\n      })\n  }\n\n  onPlanChange = (data) =>{\n    this.props.onPlanChange(data);\n  }\n\n  onSeatsChange = (data) => {\n    this.props.onSeatsChange(data);\n  }\n\n  onUpdate = (data) => {\n    this.props.onUpdate(data);\n  }\n\n  onBack = () =>{\n    this.props.onBack()\n  }\n\n  onHandlePrevData = (data) =>{\n    this.props.onHandlePrevData(data);\n  }\n\n  render(){\n    return(\n      <div>\n        {\n          this.state.loading \n            ? <div className=\"loading\">Loading...</div> \n            : \n            <div>\n              {\n                this.props.store.overview \n                  ? <SubscriptionOverview\n                      store={this.props.store}\n                      back={this.onBack} />\n                  : <Subscription \n                      store={this.props.store}\n                      plans={PLAN_NAMES}\n                      costs={PLAN_COSTS}\n                      handlePlanChange={this.onPlanChange}\n                      handleSeatsChange={this.onSeatsChange}\n                      handlePrevData={this.onHandlePrevData}\n                      update={this.onUpdate} />\n              }\n              </div>\n            } \n      </div>\n      \n    );\n  }\n}\n\n\nconst mapStateToProps = (state) =>({\n  store: state.subscriptionReducer\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getData: () => dispatch(Actions.getData()),\n    onPlanChange: (data) => dispatch(Actions.planChange(data)),\n    onSeatsChange: (data) => dispatch(Actions.seatsChange(data)),\n    onUpdate: (data) => dispatch(Actions.update(data)),\n    onBack: () => dispatch(Actions.back()),\n    onHandlePrevData: (data) => dispatch(Actions.prevData(data))\n  }\n  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport subscriptionReducer from './subscriptionReducer';\r\n\r\nexport default combineReducers({\r\n    subscriptionReducer\r\n});","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducers/rootReducer'\r\n\r\nexport const initialState = {\r\n    plan: 'basic',\r\n    name: 'Basic',\r\n    seats: 0,\r\n    cost:  0\r\n};\r\n\r\nconst configureStore = () => {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk));\r\n}\r\n\r\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './CSS/subscription.css';\nimport {Provider} from 'react-redux';\nimport configureStore from './redux/store'\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}